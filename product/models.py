from django.db import models
from django.urls import reverse
from django.utils.translation import gettext_lazy as _
from mptt.models import MPTTModel, TreeForeignKey
from django.contrib.auth import get_user_model
from django.core.validators import MaxValueValidator, MinValueValidator


class Product(models.Model):
    """–ü—Ä–æ–¥—É–∫—Ç"""
    name = models.CharField(max_length=128, verbose_name=_("–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"))
    description = models.CharField(max_length=1024, verbose_name=_("–æ–ø–∏—Å–∞–Ω–∏–µ"))
    seller = models.ManyToManyField("shop.Seller", through="Offer", verbose_name=_("–ø—Ä–æ–¥–∞–≤–µ—Ü"))
    property = models.ManyToManyField("Property", through="ProductProperty", verbose_name=_("—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"))
    category = models.ForeignKey("Category", on_delete=models.CASCADE, blank=True, null=True, related_name="cat")

    def __str__(self):
        return self.name

    def get_absolute_url(self):
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Ä–ª –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç """
        return reverse('product-detail', args=[str(self.id)])


class Property(models.Model):
    """–°–≤–æ–π—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    name = models.CharField(max_length=512, verbose_name=_("–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"))

    def __str__(self):
        return self.name


class ProductProperty(models.Model):
    """–ó–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    product = models.ForeignKey(Product, on_delete=models.PROTECT)
    property = models.ForeignKey(Property, on_delete=models.PROTECT, related_name='prod')
    value = models.CharField(max_length=128, verbose_name=_("–∑–Ω–∞—á–µ–Ω–∏–µ"))


class Banner(models.Model):
    """ –ë–∞–Ω–Ω–µ—Ä—ã. """
    title = models.CharField(max_length=128, verbose_name=_('–∑–∞–≥–æ–ª–æ–≤–æ–∫'))
    brief = models.CharField(max_length=512, verbose_name=_('–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ'))
    icon = models.ImageField(upload_to='files/', verbose_name=_('–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'))
    added_at = models.DateTimeField(auto_created=True, auto_now=True)
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='banners')
    is_active = models.BooleanField(default=False)

    def __str__(self):
        return self.title

    def get_absolute_url(self):
        """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Ä–ª –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç """
        return self.product.get_absolute_url()


class Category(MPTTModel):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    STATUS_CHOICE = [
        (True, _("–ê–∫—Ç–∏–≤–Ω–∞")),
        (False, _("–ù–µ –∞–∫—Ç–∏–≤–Ω–∞")),
    ]

    name = models.CharField(max_length=100, verbose_name=_("–∫–∞—Ç–µ–≥–æ—Ä–∏—è"))
    icon = models.FileField(upload_to="images/icons/", verbose_name=_("–∏–∫–æ–Ω–∫–∞"), blank=True)
    active = models.BooleanField(choices=STATUS_CHOICE, default=False, verbose_name=_("–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"))
    parent = TreeForeignKey('self', on_delete=models.CASCADE, null=True, blank=True, related_name="children")

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = _("–∫–∞—Ç–µ–≥–æ—Ä–∏—è")
        verbose_name_plural = _("–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

    def save(self, *args, **kwargs):
        if not self.parent:
            pass
        elif self.parent.level >= 2:
            raise ValueError('–î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å!')
        super(Category, self).save(*args, **kwargs)


class Offer(models.Model):
    """–¢–æ–≤–∞—Ä"""
    product = models.ForeignKey("Product", on_delete=models.PROTECT, related_name='offers')
    seller = models.ForeignKey("shop.Seller", on_delete=models.PROTECT, related_name='sellers')
    price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=_('—Ü–µ–Ω–∞'))
    added_at = models.DateTimeField(auto_created=True, auto_now=True, verbose_name=_('–≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'))

    def __str__(self):
        return self.product.name

    class Meta:
        verbose_name = _("—Ç–æ–≤–∞—Ä")
        verbose_name_plural = _("—Ç–æ–≤–∞—Ä—ã")


class ProductImage(models.Model):
    """–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    product = models.ForeignKey(Product, verbose_name=_('–ø—Ä–æ–¥—É–∫—Ç'), on_delete=models.CASCADE, related_name='images')
    image = models.ImageField(upload_to='images/')

    class Meta:
        verbose_name = _('–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞')
        verbose_name_plural = _('–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤')

    def __str__(self):
        return self.product.name


class HistoryView(models.Model):
    """–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    # user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    view_at = models.DateTimeField(auto_now=True, verbose_name=_('–≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞'))
    product = models.ForeignKey(Product, verbose_name=_('—Ç–æ–≤–∞—Ä'), on_delete=models.CASCADE, related_name='views')

    class Meta:
        ordering = ('-view_at',)
        verbose_name = _("–∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")
        verbose_name_plural = _("–∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")

    def __str__(self):
        return self.product.name


class Feedback(models.Model):
    """–û—Ç–∑—ã–≤"""

    grate_list = [
        (1, '1 üåü'),
        (2, '2 üåü'),
        (3, '3 üåü'),
        (4, '4 üåü'),
        (5, '5 üåü'),
    ]

    product = models.ForeignKey(Product, verbose_name=_('–ø—Ä–æ–¥—É–∫—Ç'), on_delete=models.PROTECT)
    author = models.ForeignKey(get_user_model(), verbose_name=_('–∞–≤—Ç–æ—Ä'), on_delete=models.PROTECT)
    publication_date = models.DateTimeField(auto_now=True)
    rating = models.IntegerField(validators=[MaxValueValidator(5), MinValueValidator(1)], choices=grate_list,
                                 verbose_name=_('—Ä–µ–π—Ç–∏–Ω–≥'))
    description = models.TextField(max_length=2048, verbose_name=_('–æ–ø–∏—Å–∞–Ω–∏–µ'))
    image = models.ImageField(upload_to='feedback_images/', blank=True, verbose_name=_('—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è'))

    class Meta:
        verbose_name = _('–æ—Ç–∑—ã–≤')
        verbose_name_plural = _('–æ—Ç–∑—ã–≤—ã')

    def __str__(self):
        return self.product.name
